// swiftlint:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

{% if catalogs %}
{% set enumName %}{{param.enumName|default:"Asset"}}{% endset %}
{% set forceNamespaces %}{{param.forceProvidesNamespaces|default:"false"}}{% endset %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
{% set appClass %}{{param.forceAppClass|default:"app"}}{% endset %}

// MARK: - Color extension from .xcassets
import UIKit
{% macro enumBlock assets %}
    {% call casesBlock assets %}
    {% if param.allValues %}
        static let allColors: [{{enumName}}] = [
            {% filter indent:4 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
        ]
        static let allNames: [String] = [
            {% filter indent:4 %}{% call allValuesBlock assets "color" """ %}{% endfilter %}
        ]
    {% endif %}
{% endmacro %}
{% macro casesBlock assets %}
    {% for asset in assets %}
    {% if asset.type == "color" %}
        static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = setupColor("{{asset.value}}")
    {% elif asset.type == "data" %}
        {{accessModifier}} static let {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}} = {{dataType}}(name: "{{asset.value}}")
    {% elif asset.type == "image" %}
    {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
        {{accessModifier}} enum {{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
            {% filter indent:4 %}{% call casesBlock asset.items %}{% endfilter %}
        }
    {% elif asset.items %}
    {% call casesBlock asset.items %}
    {% endif %}
    {% endfor %}
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
    {% for asset in assets %}
    {% if asset.type == filter %}
        {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}{{prefix}},
    {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
        {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
    {% call allValuesBlock asset.items filter prefix2 %}
    {% elif asset.items %}
    {% call allValuesBlock asset.items filter prefix %}
    {% endif %}
    {% endfor %}
{% endmacro %}

{{accessModifier}} extension {{enumName}} {
	static private func setupColor(_ named: String) -> UIColor {
		return UIColor(named: named) ?? UIColor.blue
	}
	
    struct {{appClass}} {
  
    {% if catalogs.count > 1 %}
    {% for catalog in catalogs %}
        {{accessModifier}} enum {{catalog.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
            {% filter indent:4 %}{% call enumBlock catalog.assets %}{% endfilter %}
        }
    {% endfor %}
    {% else %}
  
    {% call enumBlock catalogs.first.assets %}
    {% endif %}
    }
}
{% else %}
// No assets found
{% endif %}
